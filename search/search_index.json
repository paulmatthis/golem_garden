{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Garden","text":"<p>We're so glad you're here \ud83c\udf31\u2728</p> <p>In a terminal with a Python (3.10 or so) environment enabled, enter:</p> <pre><code>pip install -e .\n</code></pre> <p>Then:</p> <pre><code>golem_garden\n</code></pre>"},{"location":"Community%20Guidelines/Code%20of%20Conduct/","title":"Code of Conduct","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"Community%20Guidelines/Code%20of%20Conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language </li> <li>avoid making \"male by default\" assumptions (e.g. saying \"alright boys\" when addressing a group of people)</li> <li>Being respectful of differing viewpoints,  experiences, and backgrounds</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of inappropriately sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"Community%20Guidelines/Code%20of%20Conduct/#conflict-resolution","title":"Conflict Resolution","text":"<p>If conflicts arise within the community, we encourage participants to resolve them through respectful dialogue. If necessary, contact us at info at freemocap dot org and we will do our best to facilitate resolution by providing guidance and mediation.</p>"},{"location":"Contributing%20guide/Contributing/","title":"Contribution guide","text":"<p>This document will help you understand how to contribute to the project, whether you're reporting bugs, suggesting new features, or submitting code changes. We're excited to have you on board and look forward to working with you!</p>"},{"location":"Contributing%20guide/Contributing/#getting-started","title":"Getting Started","text":"<p>In this section, you'll find information on how to set up your local development environment and any dependencies you need to be aware of. This will help you get started with contributing to FreeMoCap.</p>"},{"location":"Contributing%20guide/Contributing/#code-contributions","title":"Code Contributions","text":"<p>Contributing code to FreeMoCap involves creating and submitting pull requests. In this section, you'll learn about our development process, coding styles, and testing requirements.</p>"},{"location":"Contributing%20guide/Contributing/#we-use-github-flow","title":"We Use GitHub Flow","text":"<p>We use Github Flow as our development process. It makes it easy for contributors to submit changes and maintainers to review and merge them.</p>"},{"location":"Contributing%20guide/Contributing/#we-develop-with-github","title":"We Develop with Github","text":"<p>We use GitHub to host code, to track issues and feature requests, as well as accept pull requests.  </p>"},{"location":"Contributing%20guide/Contributing/#we-use-the-github-flow-strategy-so-all-code-changes-happen-through-pull-requests","title":"We Use the Github Flow Strategy, So All Code Changes Happen Through Pull Requests","text":"<p>Pull requests are the best way to propose changes to the codebase (we use Github Flow). We actively welcome your pull requests:  </p> <ol> <li>Fork the repo and create your branch from <code>main</code>.  </li> <li>If you've added code that should be tested, add tests.  </li> <li>If you've changed APIs, update the documentation.  </li> <li>Ensure the test suite passes.  </li> <li>Make sure your code lints.  </li> <li>Issue that pull request!</li> </ol>"},{"location":"Contributing%20guide/Contributing/#coding-styles","title":"Coding Styles","text":"<p>Consistent coding styles are important for maintaining a clean and easy-to-understand codebase. We use the following style guides for our project:</p> <ul> <li>[[Python Code Style Guide]]</li> <li>PyQT: [COMING SOON]</li> <li>API: [COMING SOON]</li> </ul>"},{"location":"Contributing%20guide/Contributing/#testing","title":"Testing","text":"<p>We require tests for all code contributions to ensure the stability and reliability of the project. When submitting a pull request, make sure your code is covered by tests, and that those tests pass our Github Actions workflow.</p> <p><code>TODO - Include examples or more specific details as needed.</code></p>"},{"location":"Contributing%20guide/Contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>Your feedback is invaluable in improving FreeMoCap. In this section, you'll learn how to report bugs and suggest new features for the project.</p> <p>For details, see our [[Bug Report]] guide</p>"},{"location":"Contributing%20guide/Contributing/#suggesting-features","title":"Suggesting Features","text":"<p>We welcome your ideas for new features or improvements to FreeMoCap. To suggest a feature, open a new issue and describe the feature, its benefits, and any potential challenges in implementing it.</p> <p>For details, see our [[Feature Request]]  guide</p>"},{"location":"Contributing%20guide/Contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are the best way to propose changes to the codebase (we use Github Flow). We actively welcome your pull requests:</p> <ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue that pull request!</li> </ol>"},{"location":"Contributing%20guide/Contributing/#getting-help-and-asking-questions","title":"Getting Help  and Asking Questions","text":"<p>If you encounter issues or have questions while contributing to Freemocap, don't hesitate to reach out. You can ask for help on our Discord server or by creating a new issue on Github. We'll do our best to assist you and provide the information you need.</p>"},{"location":"Contributing%20guide/python_style_guide/","title":"Python style guide","text":"<p>This style guide aims to maintain code readability, quality, and maintainability. </p>"},{"location":"Contributing%20guide/python_style_guide/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Follow a Universal Design approach that aspires to be interpretable to the widest possible number of people </li> <li>Follow standard best practices, e.g  S.O.L.I.D etc</li> <li>Follow  PEP 8 Guidelines</li> <li>Use  Black to auto-format your code</li> </ul>"},{"location":"Contributing%20guide/python_style_guide/#specific-guidelines","title":"Specific Guidelines","text":"<pre><code>TO DO - Add code samples for each guideline (along with links to external references when applicable)\n</code></pre> <ol> <li> <p>Include Google-formatted docstrings: Use Google-style docstrings for functions, methods, and classes to provide    clear and concise documentation.  </p> </li> <li> <p>Type hints: Use input and return type hints for functions and methods to improve code readability and facilitate    better tooling support.  </p> </li> <li> <p>Keyword arguments: Prefer using keyword arguments over simple arguments for functions and methods to improve code    clarity.  </p> </li> <li> <p>Private methods and attributes: Use leading underscores to denote private methods and attributes in classes, and    use <code>@property</code> decorators when appropriate.  </p> </li> <li> <p>Descriptive names: Use full words in variable and class names instead of abbreviations (e.g., <code>database</code> instead   of <code>db</code>).  </p> </li> <li> <p>PEP8 and <code>black</code> formatting: Follow PEP8 and <code>black</code> code formatting guidelines to maintain consistency and  readability.  </p> </li> <li> <p>Consistent naming conventions: Adopt consistent naming conventions for variables, functions, and classes.  </p> </li> <li>Use <code>snake_case</code> for variables and functions (e.g., <code>my_variable</code>, <code>my_function</code>)  </li> <li>Use <code>PascalCase</code> for class names (e.g., <code>MyClass</code>)  </li> <li> <p>Use <code>UPPERCASE</code> for constants (e.g., <code>MY_CONSTANT</code>)  </p> </li> <li> <p>Keep functions and methods short: Aim to keep functions and methods concise, ideally not exceeding 15-20 lines of  code.  </p> </li> <li> <p>Modularize code: Organize code into modules and packages to maintain a clean and organized codebase.  </p> </li> <li> <p>Minimal comments: Avoid comments if possible. Write code that is simple and descriptive (See pt 5) enough that comments are  not necessary. If needed, use comments sparingly to provide context or explain complex or non-obvious sections of  your code.  </p> </li> <li> <p>Error handling: Use appropriate error handling techniques, such as <code>try</code> and <code>except</code> blocks, to handle     exceptions and provide meaningful error messages to users.  </p> </li> <li> <p>Write tests: Write unit tests to ensure the correct functioning of your code.  </p> </li> <li> <p>Code reviews: Perform code reviews with team members or peers to maintain a high-quality codebase.</p> </li> </ol>"},{"location":"notes/bluesky_todos/","title":"Bluesky todos","text":"<ul> <li>Intermediary toml format to spin up golems</li> <li>may need a parser script (factory?) that's aware of things like which tools are available, etc</li> <li>goal is a clean, human-readable toml that makes this data-driven. new visualizations can emerge from there. </li> <li>Code and markdown snipping / saving tools. </li> <li>new tool for basic File I/O (unless already exists)</li> </ul>"},{"location":"notes/pycharm_quickref/","title":"PyCharm quick reference","text":"<ul> <li> <p>Alt+J = collect instances of this pattern in the text buffer</p> </li> <li> <p>Ctrl+Ctrl(Hold) + arrow keys = select same position every row. escape to cancel</p> </li> <li> <p>Shift+F6 = refactor</p> </li> <li> <p>Alt+Enter = \"Best guess to fix\"</p> </li> <li> <p>Shift+Shift = default quick search through files and references, for entities</p> </li> <li> <p>Ctrl+F = decent classic search</p> </li> <li> <p>Ctrl+Shift+F = CAPITAL find-- search the whole project, directory, or major</p> </li> <li> <p>Alt+Shift+E = Run the current selection (or cursor's current line) in the python console</p> </li> <li> <p>Ctrl+Alt+Shift+N = The Symbols.</p> </li> </ul>"}]}